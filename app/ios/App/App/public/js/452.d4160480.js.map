{"version":3,"file":"js/452.d4160480.js","mappings":"sLACO,MAAMA,UAAwB,KACjCC,cACIC,QACAC,KAAKC,gBAAkB,KACnB,oBAAqBC,SACrBF,KAAKC,gBAAkBC,OAAOD,gBAC9BC,OAAOC,iBAAiB,gBAAgB,KACpCH,KAAKI,MAAM,IAGvB,CACAC,YAAYC,GACHN,KAAKC,iBACND,KAAKO,8BAEHP,KAAKI,OACX,MAAMH,EAAkBD,KAAKC,gBACvBO,EAAYR,KAAKS,+BAA+BH,GACtD,OAAO,IAAII,SAAQ,CAACC,EAASC,KACzBJ,EAAUK,MAAQ,KACdF,GAAS,EAEbH,EAAUM,QAAWC,IACjBH,EAAOG,EAAM,EAEjBd,EAAgBe,MAAMR,EAAU,GAExC,CACAH,aACSL,KAAKC,iBACND,KAAKO,wBAETP,KAAKC,gBAAgBgB,QACzB,CACAZ,8BACI,MAAMa,EAASlB,KAAKmB,2BACdC,EAAYF,EAAOG,KAAIC,GAASA,EAAMC,OACtCC,EAAoBJ,EAAUK,QAAO,CAACC,EAAGC,EAAGC,IAAMA,EAAEC,QAAQH,IAAMC,IACxE,MAAO,CAAEP,UAAWI,EACxB,CACAnB,2BACI,MAAMa,EAASlB,KAAKmB,2BACpB,MAAO,CAAED,SACb,CACAb,0BAA0BC,GACtB,MAAMwB,QAAe9B,KAAK+B,wBACpBC,EAAsBF,EAAOV,UAAUa,SAAS3B,EAAQiB,MAC9D,MAAO,CAAEW,UAAWF,EACxB,CACA3B,oBACIL,KAAKmC,yBACT,CACA1B,+BAA+BH,GAC3B,MAAMY,EAASlB,KAAKmB,2BACdX,EAAY,IAAI4B,0BAChB,KAAEC,EAAI,KAAEd,EAAI,KAAEe,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAElB,GAAUhB,EAiBnD,OAhBIgB,IACAd,EAAUc,MAAQJ,EAAOI,IAEzBkB,IACAhC,EAAUgC,OAASA,GAAU,GAAKA,GAAU,EAAIA,EAAS,GAEzDF,IACA9B,EAAU8B,KAAOA,GAAQ,IAAOA,GAAQ,GAAKA,EAAO,GAEpDC,IACA/B,EAAU+B,MAAQA,GAAS,GAAKA,GAAS,EAAIA,EAAQ,GAErDhB,IACAf,EAAUe,KAAOA,GAErBf,EAAU6B,KAAOA,EACV7B,CACX,CACAW,2BAOI,OANKnB,KAAKC,iBACND,KAAKO,0BAEJP,KAAKyC,iBAAmBzC,KAAKyC,gBAAgBC,OAAS,KACvD1C,KAAKyC,gBAAkBzC,KAAKC,gBAAgB0C,aAEzC3C,KAAKyC,eAChB,CACAlC,wBACI,MAAMP,KAAK4C,YAAY,qDAC3B,CACAT,0BACI,MAAMnC,KAAK6C,cAAc,0BAC7B,E","sources":["webpack://sadiss_app/./node_modules/@capacitor-community/text-to-speech/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nexport class TextToSpeechWeb extends WebPlugin {\r\n    constructor() {\r\n        super();\r\n        this.speechSynthesis = null;\r\n        if ('speechSynthesis' in window) {\r\n            this.speechSynthesis = window.speechSynthesis;\r\n            window.addEventListener('beforeunload', () => {\r\n                this.stop();\r\n            });\r\n        }\r\n    }\r\n    async speak(options) {\r\n        if (!this.speechSynthesis) {\r\n            this.throwUnsupportedError();\r\n        }\r\n        await this.stop();\r\n        const speechSynthesis = this.speechSynthesis;\r\n        const utterance = this.createSpeechSynthesisUtterance(options);\r\n        return new Promise((resolve, reject) => {\r\n            utterance.onend = () => {\r\n                resolve();\r\n            };\r\n            utterance.onerror = (event) => {\r\n                reject(event);\r\n            };\r\n            speechSynthesis.speak(utterance);\r\n        });\r\n    }\r\n    async stop() {\r\n        if (!this.speechSynthesis) {\r\n            this.throwUnsupportedError();\r\n        }\r\n        this.speechSynthesis.cancel();\r\n    }\r\n    async getSupportedLanguages() {\r\n        const voices = this.getSpeechSynthesisVoices();\r\n        const languages = voices.map(voice => voice.lang);\r\n        const filteredLanguages = languages.filter((v, i, a) => a.indexOf(v) == i);\r\n        return { languages: filteredLanguages };\r\n    }\r\n    async getSupportedVoices() {\r\n        const voices = this.getSpeechSynthesisVoices();\r\n        return { voices };\r\n    }\r\n    async isLanguageSupported(options) {\r\n        const result = await this.getSupportedLanguages();\r\n        const isLanguageSupported = result.languages.includes(options.lang);\r\n        return { supported: isLanguageSupported };\r\n    }\r\n    async openInstall() {\r\n        this.throwUnimplementedError();\r\n    }\r\n    createSpeechSynthesisUtterance(options) {\r\n        const voices = this.getSpeechSynthesisVoices();\r\n        const utterance = new SpeechSynthesisUtterance();\r\n        const { text, lang, rate, pitch, volume, voice } = options;\r\n        if (voice) {\r\n            utterance.voice = voices[voice];\r\n        }\r\n        if (volume) {\r\n            utterance.volume = volume >= 0 && volume <= 1 ? volume : 1;\r\n        }\r\n        if (rate) {\r\n            utterance.rate = rate >= 0.1 && rate <= 10 ? rate : 1;\r\n        }\r\n        if (pitch) {\r\n            utterance.pitch = pitch >= 0 && pitch <= 2 ? pitch : 2;\r\n        }\r\n        if (lang) {\r\n            utterance.lang = lang;\r\n        }\r\n        utterance.text = text;\r\n        return utterance;\r\n    }\r\n    getSpeechSynthesisVoices() {\r\n        if (!this.speechSynthesis) {\r\n            this.throwUnsupportedError();\r\n        }\r\n        if (!this.supportedVoices || this.supportedVoices.length < 1) {\r\n            this.supportedVoices = this.speechSynthesis.getVoices();\r\n        }\r\n        return this.supportedVoices;\r\n    }\r\n    throwUnsupportedError() {\r\n        throw this.unavailable('SpeechSynthesis API not available in this browser.');\r\n    }\r\n    throwUnimplementedError() {\r\n        throw this.unimplemented('Not implemented on web.');\r\n    }\r\n}\r\n//# sourceMappingURL=web.js.map"],"names":["TextToSpeechWeb","constructor","super","this","speechSynthesis","window","addEventListener","stop","async","options","throwUnsupportedError","utterance","createSpeechSynthesisUtterance","Promise","resolve","reject","onend","onerror","event","speak","cancel","voices","getSpeechSynthesisVoices","languages","map","voice","lang","filteredLanguages","filter","v","i","a","indexOf","result","getSupportedLanguages","isLanguageSupported","includes","supported","throwUnimplementedError","SpeechSynthesisUtterance","text","rate","pitch","volume","supportedVoices","length","getVoices","unavailable","unimplemented"],"sourceRoot":""}